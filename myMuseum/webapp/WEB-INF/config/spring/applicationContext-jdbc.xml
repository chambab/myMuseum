<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

		
	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
	<util:properties id="contextProperties" location="classpath:context.properties"/>

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<!-- context:property-placeholder location="classpath:jdbc.properties"/ -->

	<!--
		Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation
		for the required JAR files. Alternatively you can use another connection pool
		such as C3P0, similarly configured using Spring.
	-->
	<tx:annotation-driven transaction-manager="transactionManager" order="200"/>

	<!-- MySQL
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
	    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>	    
	    <property name="url" value="jdbc:mysql://www.connectsoft.co.kr/msmuseum?autoReconnect=true&amp;useUnicode=true"/>
	    <property name="username" value="mymuseum"/>
	    <property name="password" value="mymuseum2009"/>
	</bean>
	 -->
	
	<!-- Postsql -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
	    <property name="driverClassName" value="org.postgresql.Driver"/>	    
	    <property name="url" value="jdbc:postgresql://localhost:6789/mymuseum"/>
	    <property name="username" value="chanbab"/>
	    <property name="password" value="msmuseum2011"/>
        <property name="maxActive" value="30"/>
        <property name="maxWait" value="1000"/>	  
	</bean>
	 
	
	<!-- Oracle
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
	    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	    <property name="url" value="jdbc:oracle:thin:@oracle.chanbab.cafe24.com:1521:orcl"/>
	    <property name="url" value="jdbc:oracle:thin:@mymuseumdb.ctyzkk9cljub.us-east-1.rds.amazonaws.com:1521:AWSORA"/>
	    <property name="username" value="chanbab"/>
	    <property name="password" value="msmuseum2011"/>
        <property name="maxActive" value="30"/>
        <property name="maxWait" value="1000"/>	    
	</bean>
	 -->
	
	 
	<!--  Oracle Original Configuration 
	<bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/chanbab"/>
	</bean>
	-->

	
	<!-- JNDI DataSource for JEE environments -->
	<!--
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/chanbab"/>
	-->

	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">	
		<property name="dataSource" ref="dataSource"/>
	</bean>
	 

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
	</bean>
	-->

	<!-- Hibernate SessionFactory -->
	<!-- 
    <bean id="sessionFactory"
	    class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	    <property name="dataSource" ref="dataSource" />
	    <property name="hibernateProperties">
	            <props>
	                    <prop key="hibernate.dialect">
	                            org.hibernate.dialect.Oracle9Dialect
	                    </prop>
	                    <prop key="hibernate.show_sql">true</prop>	              
	            </props>
	    </property>
    </bean>
     -->
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->


	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the CallMonitoringAspect below).
	-->
	<!--AOP(Aspect Oriented Programming)-->
	
	<!-- aop:aspectj-autoproxy / -->

	<!--
		Exporter that exposes the Clinic DAO and the CallMonitoringAspect via JMX,
		based on the @ManagedResource, @ManagedAttribute, and @ManagedOperation annotations.
	-->
	<!--  context:mbean-export/ -->

	<!-- PetClinic's central data access object using Spring's SimpleJdbcTemplate -->
	<!-- bean id="clinic" class="org.springframework.samples.petclinic.jdbc.SimpleJdbcClinic"/ -->

	<!-- Call monitoring aspect that monitors call count and call invocation time -->
	<!--  bean id="callMonitor" class="org.springframework.samples.petclinic.aspects.CallMonitoringAspect"/ -->

  
</beans>
